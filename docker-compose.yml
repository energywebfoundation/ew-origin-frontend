version: "3"

networks:
 kong-net:
  driver: bridge

volumes:
  frontend-es-data:
  kong-pg-data:

services:

  # Postgres: The database used by Kong
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    volumes:
      - kong-pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kong database migration
  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_PG_HOST: kong-database
    links:
      - kong-database
    depends_on:
      - kong-database

  # Kong: The API Gateway
  kong:
    image: kong:latest
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
      - kong-database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8001:8001"
      - "80:8000"

  # Konga database prepare
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong@kong-database:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-database
    depends_on:
      - kong-database

  # Konga: Kong GUI
  konga:
    image: pantsel/konga:next
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"

  blockchain:
    image: trufflesuite/ganache-cli:latest
    ports:
      - 8545:8545
    entrypoint:
      - 'node'
      - '/app/ganache-core.docker.cli.js'
      - '-g 0'
      - '-l 80000000'
      - '-e 1000000'
      - '-a 20'

  # Our Frontend
  ew-origin-frontend:
    build: .
    restart: always
    networks:
      - kong-net
    environment:
      NODE_ENV: production
    links:
      - kong

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0
    ports:
      - 9200:9200
    environment:
      - "http.cors.enabled=true"
# Set multiple allowed hosts, for es this need to be done with a regex
# In the regex a forward slash needs to be escaped, docker-compose requires the backslash to be escaped with another backslash
      - "http.cors.allow-origin=/https?:\\/\\/(localhost|frontend)(:[0-9]+)?/"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      - "http.cors.allow-credentials=true"
    volumes:
      - frontend-es-data:/usr/share/elasticsearch/data
    restart: always
    networks:
      - kong-net
    links:
      - ew-origin-frontend

  # API Server backend
  ew-origin:
    build: ../ew-helper-demo
    ports:
      - 3003:3003
    restart: always
    environment:
      NODE_ENV: production
    links:
      - blockchain